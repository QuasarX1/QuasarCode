<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuasarCode_Library</name>
    </assembly>
    <members>
        <member name="T:QuasarCode.Library.IO.Text.Console">
            <summary>
            Provites IO methods for intervacing with a text based console.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print">
            <summary>
            Outputs text to the console. Prints only a new line.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print(System.String,System.String,System.String[])">
            <summary>
            Outputs text to the console.
            </summary>
            <param name="text">The text to output.</param>
            <param name="end">String added to the end of the output.</param>
            <param name="moreText">List of any other strings to output.</param>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print(System.Object,System.String,System.Object[])">
            <summary>
            Outputs text versions of objects to the console.
            </summary>
            <param name="text">The object to output. Must be able to be implicitly converted to a string.</param>
            <param name="end">String added to the end of the output.</param>
            <param name="moreText">List of any other strings to output. Must be able to be implicitly converted to a string.</param>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String)">
            <summary>
            Retrives an input from the console.
            </summary>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message.
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String,System.Func{System.String,System.Boolean},System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Uses a method deligate to force valid input.
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="validator">Validator method deligate. Takes a string and returns a boolean.</param>
            <param name="errorMessage">Message to display if validation fails before asking for the input again.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input``1(System.String,System.Func{System.String,``0},System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Converts the input to the given type.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="converter">Method deligate to convert the string input to the requested type.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console, coverted to the specified type.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input``1(System.String,System.Func{System.String,``0},System.Func{System.Object,System.Boolean},System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Uses a method deligate to force valid input. Converts the input to the given type (before validation)
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="converter">Method deligate to convert the string input to the requested type.</param>
            <param name="validator">Validator method deligate. Takes an object of the specified type and returns a boolean.</param>
            <param name="errorMessage">Message to display if validation fails before asking for the input again.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console, coverted to the specified type.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Option``1(``0[],System.String,System.Boolean)">
            <summary>
            Allows the user to select an item from an array of options. Returns the option.
            </summary>
            <typeparam name="T">Type of the objects in the array.</typeparam>
            <param name="options">Array of options to be selected from. Must have a length of at least 1.</param>
            <param name="message">Optional message to display to the user.</param>
            <param name="displayInput">Wether or not the user's selected option will be displayed on the console.</param>
            <returns>Selected option.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Option(System.Object[],System.String,System.Boolean)">
            <summary>
            Allows the user to select an item from an array of options. Returns the option's index.
            </summary>
            <param name="options">Array of options to be selected from. Must have a length of at least 1.</param>
            <param name="message">Optional message to display to the user.</param>
            <param name="displayInput">Wether or not the user's selected option will be displayed on the console.</param>
            <returns>Index of selected option.</returns>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Coordinate`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.ICoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="dimentions"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.CylindricalPolar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.CylindricalPolar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.ICoordinateSystem">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.Polar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.Polar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Coordinates.Systems.Polar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.SphericalPolar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.SphericalPolar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1.#ctor(QuasarCode.Library.Maths.Coordinates.ICoordinate,QuasarCode.Library.Maths.Coordinates.ICoordinate)">
            <summary>
            
            </summary>
            <param name="point1">A point on the line in the direction of the vector</param>
            <param name="point2">A point on the line in the direction of the vector</param>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1.#ctor(QuasarCode.Library.Maths.Matrices.Vectors.Vector{`0})">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1">
            <summary>
            
            </summary>
            <typeparam name="T">Coordinate system</typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1.#ctor(System.Double,QuasarCode.Library.Maths.Coordinates.ICoordinate,QuasarCode.Library.Maths.Coordinates.ICoordinate)">
            <summary>
            
            </summary>
            <param name="magnitude">The length of the vector</param>
            <param name="point1">A point on the line in the direction of the vector</param>
            <param name="point2">A point on the line in the direction of the vector</param>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1.#ctor(System.Double,QuasarCode.Library.Maths.Matrices.Vectors.UnitVector{`0})">
            <summary>
            
            </summary>
            <param name="magnitude"></param>
            <param name="direction"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Angle`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Angle`1.#ctor(System.Double,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Length`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Length`1.#ctor(System.Double,`0,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            /// <param name="direction">    </param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Mass">
            <summary>
            The mesure of the matter comprising a body
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Mass.#ctor(System.Double,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.IQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.Magnitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.Unit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.IVectorQuantity`1">
            <summary>
            
            </summary>
            <typeparam name="T">Coordinate system</typeparam>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IVectorQuantity`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Units">
            <summary>
            
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Degrees">
            <summary>
            Unit of angle
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Radians">
            <summary>
            Unit of angle
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.km">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.m">
            <summary>
            Unit of length (SI base)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.cm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.mm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.micro_m">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.nm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Kg">
            <summary>
            Unit of mass (SI base)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.g">
            <summary>
            Unit of mass (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.mg">
            <summary>
            Unit of mass (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.lb">
            <summary>
            Unit of mass (Imperial)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.oz">
            <summary>
            Unit of mass (Imperial)
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.MultiItterator">
            <summary>
            Allows for itteration of multiple collections similtaniously.
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Tools.MultiItterator.Items">
            <summary>
            The collections being itterated over.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Count">
            <summary>
            The number of items in the contained collections.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.#ctor(System.Collections.Generic.ICollection{System.Object}[])">
            <summary>
            Creates a new instance of the MultiItterator class. Collections must have the same length.
            </summary>
            <param name="items">IColections of objects.</param>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Item(System.Int32)">
            <summary>
            Returns the index and data at the specified index in the collections.
            </summary>
            <param name="index">Index of location.</param>
            <returns>A tuple containing the index of the location and an array of the data.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.GetEnumerator">
            <summary>
            Gets an object to enumerate over.
            </summary>
            <returns>The current object.</returns>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Current">
            <summary>
            The data at the current point in the itteration.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.Dispose">
            <summary>
            Releses any resources and disposes.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.MoveNext">
            <summary>
            Attempts to move to the next position in the itteration.
            </summary>
            <returns>Boolean indicating wether the itteration can continue.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.Reset">
            <summary>
            Resets the enumeration.
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.MultiItterator`1">
            <summary>
            Allows for itteration of multiple collections similtaniously. Generic version for simplified use if all collections hold the same data type.
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Tools.MultiItterator`1.Items">
            <summary>
            The collections being itterated over.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Count">
            <summary>
            The number of items in the contained collections.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.#ctor(System.Collections.Generic.ICollection{`0}[])">
            <summary>
            Creates a new instance of the MultiItterator class. Collections must have the same length.
            </summary>
            <param name="items">IColections of objects.</param>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Item(System.Int32)">
            <summary>
            Returns the index and data at the specified index in the collections.
            </summary>
            <param name="index">Index of location.</param>
            <returns>A tuple containing the index of the location and an array of the data.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.GetEnumerator">
            <summary>
            Gets an object to enumerate over.
            </summary>
            <returns>The current object.</returns>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Current">
            <summary>
            The data at the current point in the itteration.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.Dispose">
            <summary>
            Releses any resources and disposes.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.MoveNext">
            <summary>
            Attempts to move to the next position in the itteration.
            </summary>
            <returns>Boolean indicating wether the itteration can continue.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.Reset">
            <summary>
            Resets the enumeration.
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.Validators">
            <summary>
            Provides type and content testing methods for testing objects.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsBool(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a boolean.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsChar(System.Object)">
            <summary>
            Checks to see if the provided object is a character object or a string with a single character.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsString(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a string.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.Char)">
            <summary>
            Checks to see if the provided character is an alpha character.
            </summary>
            <param name="testCase">Character to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.String)">
            <summary>
            Checks to see if the provided string contains only alpha character.
            </summary>
            <param name="testCase">String to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.Object)">
            <summary>
            Checks to see if the provided object is a valid character or string and contains only alpha characters.
            </summary>
            <param name="testCase">Object to test.</param>
            <returns>Boolean - false if not a character or string or has no conversion to one</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsInt(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to an integer (int64).
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsDouble(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a float.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.InRange(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Tests if a number lies in the range lower (inclusive) to upper (exclusive) or outside the range if requested.
            </summary>
            <param name="testCase">Number to be tested.</param>
            <param name="lower">Lower boundry (inclusive).</param>
            <param name="upper">Upper boundry (exclusive).</param>
            <param name="inside">Specifies wether the test should be for lying inside the range (outside if false).</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsEven(System.Object)">
            <summary>
            Tests if a given number is even.
            --| WARNING |-- Will ROUND floating point numbers to the nearest integer.
            </summary>
            <param name="testCase">The number to test. Must be convertable to an integer.</param>
            <returns>Boolean</returns>
        </member>
    </members>
</doc>
