<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuasarCode_Library</name>
    </assembly>
    <members>
        <member name="T:QuasarCode.Library.Games.Cards.CardGroup`1">
            <summary>
            A collection of IPlaying cards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.CardGroup`1.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.#ctor(System.String)">
            <summary>
            Creates a CardGroup instance with no cards
            </summary>
            <param name="name">The name of the group</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.#ctor(System.String,QuasarCode.Library.Games.Cards.IPlayingCard[])">
            <summary>
            Creates a CardGroup instance with a starting set of cards
            </summary>
            <param name="name">The name of the group</param>
            <param name="cards">The cards to be added to the group</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.#ctor(System.String,System.Collections.Generic.IEnumerable{QuasarCode.Library.Games.Cards.IPlayingCard})">
            <summary>
            Creates a CardGroup instance with a starting set of cards
            </summary>
            <param name="name">The name of the group</param>
            <param name="cards">The cards to be added to the group</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.Remove(System.Int32)">
            <summary>
            Remove a card from the collection at the specified index
            </summary>
            <param name="index">The index of the card to be removed</param>
            <returns>An IPlaying card</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.Shuffle">
            <summary>
            Randomises the order of the cards in the group
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardGroup`1.ReturnCards(System.Object)">
            <summary>
            Event handler for requesting the return of cards
            </summary>
            <param name="sender">The object triggering the event</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.CardQueue`1">
            <summary>
            A queue data structure containing IPlayingCards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.CardQueue`1.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardQueue`1.#ctor(System.String)">
            <summary>
            Creates an new CardQueue instance
            </summary>
            <param name="name">The name of the queue</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardQueue`1.Add(`0)">
            <summary>
            Add a card to the collection
            </summary>
            <param name="card">The card to add</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardQueue`1.Remove(System.Int32)">
            <summary>
            Remove a card from the collection at the specified index
            </summary>
            <param name="index">The index of the card to be removed</param>
            <returns>An IPlaying card</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardQueue`1.Shuffle">
            <summary>
            Randomises the order of the cards in the group
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardQueue`1.ReturnCards(System.Object)">
            <summary>
            Event handler for requesting the return of cards
            </summary>
            <param name="sender">The object triggering the event</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.CardStack`1">
            <summary>
            A stack data structure containing IPlayingCards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.CardStack`1.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardStack`1.#ctor(System.String)">
            <summary>
            Creates an new CardStack instance
            </summary>
            <param name="name">The name of the stack</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardStack`1.Add(`0)">
            <summary>
            Add a card to the collection
            </summary>
            <param name="card">The card to add</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardStack`1.Remove(System.Int32)">
            <summary>
            Remove a card from the collection at the specified index
            </summary>
            <param name="index">The index of the card to be removed</param>
            <returns>An IPlaying card</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardStack`1.Shuffle">
            <summary>
            Randomises the order of the cards in the group
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.CardStack`1.ReturnCards(System.Object)">
            <summary>
            Event handler for requesting the return of cards
            </summary>
            <param name="sender">The object triggering the event</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.Deck">
            <summary>
            A collection of 52+ unique playing cards. The exact number can vary dependant on the number of jokers added
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.Deck.Cards">
            <summary>
            The cards in the deck (including the jokers).
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.Deck.Jokers">
            <summary>
            The number of jokers in this deck
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Deck instance of 52 cards along with a specified number of jokers (deafult is 0)
            </summary>
            <param name="name">The name of the deck</param>
            <param name="jokers">Number of jokers to add to the standard 52 cards</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.InitialiseGroup(QuasarCode.Library.Games.Cards.ICardGroup{QuasarCode.Library.Games.Cards.PlayingCard}[])">
            <summary>
            Initialises a card group for use with the deck
            </summary>
            <param name="groups">The group(s) to be initialised</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.ReleaseGroup(QuasarCode.Library.Games.Cards.ICardGroup{QuasarCode.Library.Games.Cards.PlayingCard}[])">
            <summary>
            Removes card groups from use with the deck
            </summary>
            <param name="groups">The group(s) to remove</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Deal``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Deals the deck into a list of groups untill the deck is empty
            </summary>
            <param name="hands">The groups (ICardGroup's) to deal into</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Deal``1(``0[])">
            <summary>
            Deals the deck into a list of groups untill the deck is empty
            </summary>
            <param name="hands">The groups (ICardGroup's) to deal into</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Deal``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Boolean)">
            <summary>
            Deals a set number of cards from the deck into a list of groups
            </summary>
            <param name="hands">The hands to deal into</param>
            <param name="cardsPerHand">The number of cards to deal to each hand</param>
            <param name="suppressEmptyException">Whether or not to suppress the exception generated when there isn't enough cards remaining to fill deal the number requested to each hand</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Deal``1(System.Collections.Generic.ICollection{``0},System.Int32,``0,System.Boolean)">
            <summary>
            Deals a set number of cards from the deck into a list of groups and then dumps the rest into a group
            </summary>
            <param name="hands">The hands to deal into</param>
            <param name="cardsPerHand">The number of cards to deal to each hand</param>
            <param name="group">The group to dump any remaining cards into</param>
            <param name="suppressEmptyException">Whether or not to suppress the exception generated when there isn't enough cards remaining to fill deal the number requested to each hand</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Deal``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            Deals a set number of cards from the deck into a list of groups and then deals the remaining cards to a list of groups
            </summary>
            <param name="hands">The hands to deal into</param>
            <param name="cardsPerHand">The number of cards to deal to each hand</param>
            <param name="groups">The groups to deal any remaining cards into</param>
            <param name="suppressEmptyException">Whether or not to suppress the exception generated when there isn't enough cards remaining to fill deal the number requested to each hand</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.Deck.Reset">
            <summary>
            Reset the deck so that it has all the cards it started with and asks all ICardGroups dealt to to remove references to the cards
            </summary>
        </member>
        <member name="E:QuasarCode.Library.Games.Cards.Deck.ReturnCards">
            <summary>
            Request that all subscribers remove their held card objects
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.ICardGroup`1">
            <summary>
            A collection of IPlaying cards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.ICardGroup`1.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardGroup`1.Add(`0)">
            <summary>
            Add a card to the collection
            </summary>
            <param name="card">The card to add</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardGroup`1.Remove(System.Int32)">
            <summary>
            Remove a card from the collection at the specified index
            </summary>
            <param name="index">The index of the card to be removed</param>
            <returns>An IPlaying card</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardGroup`1.Shuffle">
            <summary>
            Randomises the order of the cards in the group
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardGroup`1.ReturnCards(System.Object)">
            <summary>
            Event handler for requesting the return of cards
            </summary>
            <param name="sender">The object triggering the event</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.ICardQueue`1">
            <summary>
            A queue data structure containing IPlayingCards
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardQueue`1.Enqueue(`0)">
            <summary>
            Add a new card to the end of the queue
            </summary>
            <param name="card">The card to add</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardQueue`1.Dequeue">
            <summary>
            Remove the card from the front of the queue
            </summary>
            <returns>An IPlaying card</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.ICardStack`1">
            <summary>
            A stack data structure containing IPlayingCards
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardStack`1.Push(`0)">
            <summary>
            Add a new card to the top of the stack
            </summary>
            <param name="card">The card to add</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.ICardStack`1.Pop">
            <summary>
            Remove the card on top of the stack
            </summary>
            <returns>An IPlaying card</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.IPlayingCard">
            <summary>
            A card from a standard deck of 52 playing cards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.IPlayingCard.Value">
            <summary>
            The card's value
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.IPlayingCard.Suit">
            <summary>
            The card's suit
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.PlayingCard">
            <summary>
            A card from a standard deck of 52 playing cards
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.PlayingCard.Value">
            <summary>
            The card's value
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Cards.PlayingCard.Suit">
            <summary>
            The card's suit
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.PlayingCard.#ctor(QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues,QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits)">
            <summary>
            Creates a new PlayingCard instance
            </summary>
            <param name="value">The card's value</param>
            <param name="suit">The card's suit</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues">
            <summary>
            Enum of card values from ace to king
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.A">
            <summary>Ace</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Two">
            <summary>Two</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Three">
            <summary>Three</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Four">
            <summary>Four</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Five">
            <summary>Five</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Six">
            <summary>Six</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Seven">
            <summary>Seven</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Eight">
            <summary>Eight</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Nine">
            <summary>Nine</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Ten">
            <summary>Ten</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.J">
            <summary>Jack</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Q">
            <summary>Queen</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.K">
            <summary>King</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues.Jo">
            <summary>Joker</summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.PlayingCard.GetValueString(QuasarCode.Library.Games.Cards.PlayingCard.AllowedValues)">
            <summary>
            Retrive the string counterpart to the AllowedValues enum value
            </summary>
            <param name="value">Card value from AllowedValues</param>
            <returns>String representing the provided value</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits">
            <summary>
            Enum of card suits - hearts, clubs, dimonds, spades, joker
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits.H">
            <summary>Heart</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits.C">
            <summary>Club</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits.D">
            <summary>Dimond</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits.S">
            <summary>Spade</summary>
        </member>
        <member name="F:QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits.J">
            <summary>Joker</summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Cards.PlayingCard.GetSuitString(QuasarCode.Library.Games.Cards.PlayingCard.AllowedSuits)">
            <summary>
            Retrive the string counterpart to the AllowedSuits enum suit
            </summary>
            <param name="suit">Card suit from AllowedSuits</param>
            <returns>String representing the provided suit</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.Dice12">
            <summary>
            Simple didce with 12 sides.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice12.#ctor">
            <summary>
            Creates a new Dice12 instance
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice12.#ctor(System.Int32)">
            <summary>
            Creates a new Dice12 instance with a seed for the random generator
            </summary>
            <param name="seed">Seed for the random generator</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.Dice6">
            <summary>
            Simple didce with 6 sides.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice6.#ctor">
            <summary>
            Creates a new Dice6 instance
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice6.#ctor(System.Int32)">
            <summary>
            Creates a new Dice6 instance with a seed for the random generator
            </summary>
            <param name="seed">Seed for the random generator</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.Dice8">
            <summary>
            Simple didce with 8 sides.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice8.#ctor">
            <summary>
            Creates a new Dice8 instance
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.Dice8.#ctor(System.Int32)">
            <summary>
            Creates a new Dice8 instance with a seed for the random generator
            </summary>
            <param name="seed">Seed for the random generator</param>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.DiceCup">
            <summary>
            An immutable collection of NDice objects that are rolled together.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.DiceCup.AllDice">
            <summary>
            Array of the NDice objects rolled by the cup.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.DiceCup.Count">
            <summary>
            Number of dice stored.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DiceCup.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new dice cup.
            </summary>
            <param name="sides">The number of sides on each dice</param>
            <param name="noOfDice">Number of dice to create</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DiceCup.#ctor(System.Int32[])">
            <summary>
            Creates a new dice cup.
            </summary>
            <param name="sides">Side numbers representing each unique dice</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DiceCup.#ctor(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Creates a new dice cup.
            </summary>
            <param name="sides">Collection of side numbers representing unique dice</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DiceCup.Roll(System.Boolean)">
            <summary>
            Rolls all the dice. Returns each individual result.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <returns>Array of integers</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DiceCup.RollTotal(System.Boolean)">
            <summary>
            Rolls all the dice. Returns the sum of the results.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <returns>Integer</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.DynamicDiceCup">
            <summary>
            A mutable collection of NDice objects that are rolled together.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.DynamicDiceCup.AllDice">
            <summary>
            List of the NDice objects rolled by the cup.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.DynamicDiceCup.Count">
            <summary>
            Number of dice stored.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.#ctor">
            <summary>
            Creates a new dynamic dice cup with no starting dice.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new dynamic dice cup.
            </summary>
            <param name="sides">The number of sides on each dice</param>
            <param name="noOfDice">Number of dice to create</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.#ctor(System.Int32[])">
            <summary>
            Creates a new dynamic dice cup.
            </summary>
            <param name="sides">Side numbers representing each unique dice</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.#ctor(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Creates a new dynamic dice cup.
            </summary>
            <param name="sides">Collection of side numbers representing unique dice</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.Roll(System.Boolean)">
            <summary>
            Rolls all the dice. Returns each individual result.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <exception cref="T:System.InvalidOperationException" />
            <returns>Array of integers</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.RollTotal(System.Boolean)">
            <summary>
            Rolls all the dice. Returns the sum of the results.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <exception cref="T:System.InvalidOperationException" />
            <returns>Integer</returns>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.DynamicDiceCup.Item(System.Int32)">
            <summary />
            <param name="index">Location in the collection</param>
            <returns>NDice</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.PushDice(QuasarCode.Library.Games.Dice.IDice)">
            <summary>
            Adds a dice to the cup
            </summary>
            <param name="dice">Dice to be added to the cup</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.PopDice">
            <summary>
            Removes the last avalable dice in the cup
            </summary>
            <exception cref="T:System.InvalidOperationException" />
            <returns>NDice removed from cup</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.op_Addition(QuasarCode.Library.Games.Dice.DynamicDiceCup,QuasarCode.Library.Games.Dice.IDice)">
            <summary>
            Adds a dice to a DynamicDiceCup instance
            </summary>
            <param name="cup">Dice cup to add the dice to</param>
            <param name="dice">Dice to be added to the cup</param>
            <returns>DynamicDiceCup with additional dice</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.DynamicDiceCup.op_Decrement(QuasarCode.Library.Games.Dice.DynamicDiceCup)">
            <summary>
            Removes the last avalable dice in a DynamicDiceCup instance
            </summary>
            <param name="cup">Dice cup to remove the dice from</param>
            <exception cref="T:System.InvalidOperationException" />
            <returns>DynamicDiceCup with last dice removed</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.IDice">
            <summary>
            A dice that can be rolled to produce an integer result starting from 1
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.IDice.Sides">
            <summary>
            Number of sides on the dice
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.IDice.Roll">
            <summary>
            Rolls the dice
            </summary>
            <returns>Integer outcome of the roll</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.IDiceCup">
            <summary>
            Root interface in the dice cup type hierarchy.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.IDiceCup.Count">
            <summary>
            Number of dice stored.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.IDiceCup.Roll(System.Boolean)">
            <summary>
            Rolls all the dice. Returns each individual result.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <returns>Array of integers</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.IDiceCup.RollTotal(System.Boolean)">
            <summary>
            Rolls all the dice. Returns the sum of the results.
            </summary>
            <param name="suppressEmptyExeption">Suppress the exeption raised when the cup is empty</param>
            <returns>Integer</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.IDynamicDiceCup">
            <summary>
            Interface for dice cups where the number of dice can be changed.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.IDynamicDiceCup.AllDice">
            <summary>
            List of the NDice objects rolled by the cup.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.IDynamicDiceCup.Item(System.Int32)">
            <summary>
            Provides index access to the NDice list
            </summary>
            <param name="index">Location in the collection</param>
            <returns>NDice</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.IDynamicDiceCup.PushDice(QuasarCode.Library.Games.Dice.IDice)">
            <summary>
            Adds a dice to the cup
            </summary>
            <param name="dice">Dice to be added to the cup</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.IDynamicDiceCup.PopDice">
            <summary>
            Removes the last avalable dice in the cup
            </summary>
            <exception cref="T:System.InvalidOperationException" />
            <returns>NDice removed from cup</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.IStaticDiceCup">
            <summary>
            Interface for dice cups where the number of dice is fixed.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.IStaticDiceCup.AllDice">
            <summary>
            Array of the NDice objects rolled by the cup.
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Games.Dice.NDice">
            <summary>
            A dice with a specified number of sides
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Dice.NDice.Sides">
            <summary>
            Number of sides on the dice
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.#ctor(System.Int32)">
            <summary>
            Creates a new NDice instance
            </summary>
            <param name="sides">Number of sides on the dice</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new NDice instance
            </summary>
            <param name="sides">Number of sides on the dice</param>
            <param name="seed">Seed for the random generator</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.Roll">
            <summary>
            Rolls the dice
            </summary>
            <returns>Integer outcome of the roll</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.MultipleDice(System.Int32,System.Int32)">
            <summary>
            Convenience method for creating multiple dice
            </summary>
            <param name="sides">The number of sides on each dice</param>
            <param name="noOfDice">Number of dice to create</param>
            <returns>Yeilds dice to produce an IEnumerable</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.MultipleDice(System.Int32[])">
            <summary>
            Convenience method for creating multiple dice
            </summary>
            <param name="sides">Side numbers representing each unique dice</param>
            <returns>Yeilds dice to produce an IEnumerable</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Dice.NDice.MultipleDice(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Convenience method for creating multiple dice
            </summary>
            <param name="sides">Collection of side numbers representing unique dice</param>
            <returns>Yeilds dice to produce an IEnumerable</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Spinners.ISpinner`1">
            <summary>
            Interface for all Spinner objects.
            </summary>
            <typeparam name="T">Type of result data held by the spinner.</typeparam>
        </member>
        <member name="P:QuasarCode.Library.Games.Spinners.ISpinner`1.Labels">
            <summary>
            Array of side labels
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Spinners.ISpinner`1.Sides">
            <summary>
            Number of sides/labels
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.ISpinner`1.ContextSpin">
            <summary>
            Randomly selects a side and retuns the side and the corisponding label.
            </summary>
            <returns>Tuple with int and label type</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.ISpinner`1.Spin">
            <summary>
            Randomly selects a side and retuns the corisponding label.
            </summary>
            <returns>Side label</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.ISpinner`1.IndexSpin">
            <summary>
            Randomly selects a side and retuns the side number.
            </summary>
            <returns>Side number</returns>
        </member>
        <member name="T:QuasarCode.Library.Games.Spinners.Spinner`1">
            <summary>
            Creates spinner objects with n sides and labels. Labels are selected and returned by calling the avalable methods.
            </summary>
            <typeparam name="T">Data type of labels</typeparam>
        </member>
        <member name="F:QuasarCode.Library.Games.Spinners.Spinner`1.Generator">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Spinners.Spinner`1.Labels">
            <summary>
            Array of side labels
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Games.Spinners.Spinner`1.Sides">
            <summary>
            Number of sides/labels
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.#ctor(`0[])">
            <summary>
            Creates a new spinner object.
            </summary>
            <param name="labels">Array of labels - one for each side.</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new spinner object.
            </summary>
            <param name="labels">Array of labels - one for each side.</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Creates a new spinner object.
            </summary>
            <param name="labels">Array of labels - one for each side.</param>
            <param name="seed">Seed for the random generator.</param>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.ContextSpin">
            <summary>
            Randomly selects a side and retuns the side and the corisponding label.
            </summary>
            <returns>Tuple with int and label type</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.Spin">
            <summary>
            Randomly selects a side and retuns the corisponding label.
            </summary>
            <returns>Side label</returns>
        </member>
        <member name="M:QuasarCode.Library.Games.Spinners.Spinner`1.IndexSpin">
            <summary>
            Randomly selects a side and retuns the side number.
            </summary>
            <returns>Side number</returns>
        </member>
        <member name="T:QuasarCode.Library.IO.Text.Console">
            <summary>
            Provites IO methods for intervacing with a text based console.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print">
            <summary>
            Outputs text to the console. Prints only a new line.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print(System.String,System.String,System.String[])">
            <summary>
            Outputs text to the console.
            </summary>
            <param name="text">The text to output.</param>
            <param name="end">String added to the end of the output.</param>
            <param name="moreText">List of any other strings to output.</param>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Print(System.Object,System.String,System.Object[])">
            <summary>
            Outputs text versions of objects to the console.
            </summary>
            <param name="text">The object to output. Must be able to be implicitly converted to a string.</param>
            <param name="end">String added to the end of the output.</param>
            <param name="moreText">List of any other strings to output. Must be able to be implicitly converted to a string.</param>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String)">
            <summary>
            Retrives an input from the console.
            </summary>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message.
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input(System.String,System.Func{System.String,System.Boolean},System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Uses a method deligate to force valid input.
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="validator">Validator method deligate. Takes a string and returns a boolean.</param>
            <param name="errorMessage">Message to display if validation fails before asking for the input again.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console as a string.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input``1(System.String,System.Func{System.String,``0},System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Converts the input to the given type.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="converter">Method deligate to convert the string input to the requested type.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console, coverted to the specified type.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Input``1(System.String,System.Func{System.String,``0},System.Func{System.Object,System.Boolean},System.String,System.String)">
            <summary>
            Retrives an input from the console with a prompt message. Uses a method deligate to force valid input. Converts the input to the given type (before validation)
            </summary>
            <param name="prompt">Message to be printed to the display to request input.</param>
            <param name="converter">Method deligate to convert the string input to the requested type.</param>
            <param name="validator">Validator method deligate. Takes an object of the specified type and returns a boolean.</param>
            <param name="errorMessage">Message to display if validation fails before asking for the input again.</param>
            <param name="indicator">String to format line for input.</param>
            <returns>A line of input from the console, coverted to the specified type.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Option``1(``0[],System.String,System.Boolean)">
            <summary>
            Allows the user to select an item from an array of options. Returns the option.
            </summary>
            <typeparam name="T">Type of the objects in the array.</typeparam>
            <param name="options">Array of options to be selected from. Must have a length of at least 1.</param>
            <param name="message">Optional message to display to the user.</param>
            <param name="displayInput">Wether or not the user's selected option will be displayed on the console.</param>
            <returns>Selected option.</returns>
        </member>
        <member name="M:QuasarCode.Library.IO.Text.Console.Option(System.Object[],System.String,System.Boolean)">
            <summary>
            Allows the user to select an item from an array of options. Returns the option's index.
            </summary>
            <param name="options">Array of options to be selected from. Must have a length of at least 1.</param>
            <param name="message">Optional message to display to the user.</param>
            <param name="displayInput">Wether or not the user's selected option will be displayed on the console.</param>
            <returns>Index of selected option.</returns>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Coordinate`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.ICoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Coordinates.Systems.Cartesian.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="dimentions"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.CylindricalPolar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.CylindricalPolar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.ICoordinateSystem">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.Polar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.Polar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Coordinates.Systems.Polar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Coordinates.Systems.SphericalPolar">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Coordinates.Systems.SphericalPolar.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1.#ctor(QuasarCode.Library.Maths.Coordinates.ICoordinate,QuasarCode.Library.Maths.Coordinates.ICoordinate)">
            <summary>
            
            </summary>
            <param name="point1">A point on the line in the direction of the vector</param>
            <param name="point2">A point on the line in the direction of the vector</param>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.UnitVector`1.#ctor(QuasarCode.Library.Maths.Matrices.Vectors.Vector{`0})">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1">
            <summary>
            
            </summary>
            <typeparam name="T">Coordinate system</typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1.#ctor(System.Double,QuasarCode.Library.Maths.Coordinates.ICoordinate,QuasarCode.Library.Maths.Coordinates.ICoordinate)">
            <summary>
            
            </summary>
            <param name="magnitude">The length of the vector</param>
            <param name="point1">A point on the line in the direction of the vector</param>
            <param name="point2">A point on the line in the direction of the vector</param>
        </member>
        <member name="M:QuasarCode.Library.Maths.Matrices.Vectors.Vector`1.#ctor(System.Double,QuasarCode.Library.Maths.Matrices.Vectors.UnitVector{`0})">
            <summary>
            
            </summary>
            <param name="magnitude"></param>
            <param name="direction"></param>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Angle`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Angle`1.#ctor(System.Double,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Angle`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Length`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Length`1.#ctor(System.Double,`0,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            /// <param name="direction">    </param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Length`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.Base.Mass">
            <summary>
            The mesure of the matter comprising a body
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Maths.Quantities.Base.Mass.#ctor(System.Double,QuasarCode.Library.Maths.Units)">
            <summary>
            
            </summary>
            <param name="magnitude">The size of the mass</param>
            <param name="unit">The unit of mass</param>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.Magnitude">
            <summary>
            The size of the mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.Unit">
            <summary>
            The unit of mass
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.Base.Mass.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.IQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.Magnitude">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.Unit">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IQuantity.SIUnit">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Quantities.IVectorQuantity`1">
            <summary>
            
            </summary>
            <typeparam name="T">Coordinate system</typeparam>
        </member>
        <member name="P:QuasarCode.Library.Maths.Quantities.IVectorQuantity`1.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Maths.Units">
            <summary>
            
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Degrees">
            <summary>
            Unit of angle
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Radians">
            <summary>
            Unit of angle
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.km">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.m">
            <summary>
            Unit of length (SI base)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.cm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.mm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.micro_m">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.nm">
            <summary>
            Unit of length (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.Kg">
            <summary>
            Unit of mass (SI base)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.g">
            <summary>
            Unit of mass (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.mg">
            <summary>
            Unit of mass (SI)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.lb">
            <summary>
            Unit of mass (Imperial)
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Maths.Units.oz">
            <summary>
            Unit of mass (Imperial)
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.MultiItterator">
            <summary>
            Allows for itteration of multiple collections similtaniously.
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Tools.MultiItterator.Items">
            <summary>
            The collections being itterated over.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Count">
            <summary>
            The number of items in the contained collections.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.#ctor(System.Collections.Generic.ICollection{System.Object}[])">
            <summary>
            Creates a new instance of the MultiItterator class. Collections must have the same length.
            </summary>
            <param name="items">IColections of objects.</param>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Item(System.Int32)">
            <summary>
            Returns the index and data at the specified index in the collections.
            </summary>
            <param name="index">Index of location.</param>
            <returns>A tuple containing the index of the location and an array of the data.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.GetEnumerator">
            <summary>
            Gets an object to enumerate over.
            </summary>
            <returns>The current object.</returns>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator.Current">
            <summary>
            The data at the current point in the itteration.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.Dispose">
            <summary>
            Releses any resources and disposes.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.MoveNext">
            <summary>
            Attempts to move to the next position in the itteration.
            </summary>
            <returns>Boolean indicating wether the itteration can continue.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator.Reset">
            <summary>
            Resets the enumeration.
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.MultiItterator`1">
            <summary>
            Allows for itteration of multiple collections similtaniously. Generic version for simplified use if all collections hold the same data type.
            </summary>
        </member>
        <member name="F:QuasarCode.Library.Tools.MultiItterator`1.Items">
            <summary>
            The collections being itterated over.
            </summary>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Count">
            <summary>
            The number of items in the contained collections.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.#ctor(System.Collections.Generic.ICollection{`0}[])">
            <summary>
            Creates a new instance of the MultiItterator class. Collections must have the same length.
            </summary>
            <param name="items">IColections of objects.</param>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Item(System.Int32)">
            <summary>
            Returns the index and data at the specified index in the collections.
            </summary>
            <param name="index">Index of location.</param>
            <returns>A tuple containing the index of the location and an array of the data.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.GetEnumerator">
            <summary>
            Gets an object to enumerate over.
            </summary>
            <returns>The current object.</returns>
        </member>
        <member name="P:QuasarCode.Library.Tools.MultiItterator`1.Current">
            <summary>
            The data at the current point in the itteration.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.Dispose">
            <summary>
            Releses any resources and disposes.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.MoveNext">
            <summary>
            Attempts to move to the next position in the itteration.
            </summary>
            <returns>Boolean indicating wether the itteration can continue.</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.MultiItterator`1.Reset">
            <summary>
            Resets the enumeration.
            </summary>
        </member>
        <member name="T:QuasarCode.Library.Tools.Validators">
            <summary>
            Provides type and content testing methods for testing objects.
            </summary>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsBool(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a boolean.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsChar(System.Object)">
            <summary>
            Checks to see if the provided object is a character object or a string with a single character.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsString(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a string.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.Char)">
            <summary>
            Checks to see if the provided character is an alpha character.
            </summary>
            <param name="testCase">Character to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.String)">
            <summary>
            Checks to see if the provided string contains only alpha character.
            </summary>
            <param name="testCase">String to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsAlpha(System.Object)">
            <summary>
            Checks to see if the provided object is a valid character or string and contains only alpha characters.
            </summary>
            <param name="testCase">Object to test.</param>
            <returns>Boolean - false if not a character or string or has no conversion to one</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsInt(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to an integer (int64).
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsDouble(System.Object)">
            <summary>
            Checks to see if the provided object can be converted to a float.
            </summary>
            <param name="testCase">The object to be tested.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.InRange(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Tests if a number lies in the range lower (inclusive) to upper (exclusive) or outside the range if requested.
            </summary>
            <param name="testCase">Number to be tested.</param>
            <param name="lower">Lower boundry (inclusive).</param>
            <param name="upper">Upper boundry (exclusive).</param>
            <param name="inside">Specifies wether the test should be for lying inside the range (outside if false).</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:QuasarCode.Library.Tools.Validators.IsEven(System.Object)">
            <summary>
            Tests if a given number is even.
            --| WARNING |-- Will ROUND floating point numbers to the nearest integer.
            </summary>
            <param name="testCase">The number to test. Must be convertable to an integer.</param>
            <returns>Boolean</returns>
        </member>
    </members>
</doc>
